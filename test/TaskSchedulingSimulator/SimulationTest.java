package TaskSchedulingSimulator;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import static org.junit.Assert.*;

/**
 *
 * @author Ljubo Raicevic <rljubo90@gmail.com>
 */
public class SimulationTest {
    
    private static final String inputTestDir = "test/TaskSchedulingSimulator/files/io/input/";
    private static final String traceExpectedDir = "test/TaskSchedulingSimulator/files/io/traceExpected/";
    private static final String traceActualDir = "test/TaskSchedulingSimulator/files/io/traceActual/";
    
    Simulation tc1RM_SOFT;
    Simulation tc2RM_SOFT;
    Simulation tc3RM_SOFT;
    
    Simulation tc1EDF_SOFT;
    Simulation tc2EDF_SOFT;
    Simulation tc3EDF_SOFT;
    
    public SimulationTest() {        
    }
    
    @BeforeClass
    public static void setUpClass() {
        System.out.println();
        System.out.println("---START OF Simulation.java---");
        System.out.println();
        
        //delete all files from test trace directory
        File inputDir = new File(traceActualDir);
        for (File f : inputDir.listFiles()) {
            f.delete();
        }
    }
    
    @AfterClass
    public static void after() {
        System.out.println();
        System.out.println("---END OF Simulation.java---");
        System.out.println();
    }

    
    @Before
    public void setUp() {
        // Rate Monotonic soft simulations
        tc1RM_SOFT = new Simulation(
                "tc1RM_SOFT", 
                Simulation.SimulationTypes.SOFT, 
                inputTestDir + "testCase1.txt", 
                traceActualDir + "tc1RM_SOFT.trc", 
                InstanceOfPeriodicTask.Comparators.TASK_PERIOD);
        
        tc2RM_SOFT = new Simulation(
                "tc2RM_SOFT", 
                Simulation.SimulationTypes.SOFT, 
                inputTestDir + "testCase2.txt", 
                traceActualDir + "tc2RM_SOFT.trc", 
                InstanceOfPeriodicTask.Comparators.TASK_PERIOD);
        
        tc3RM_SOFT = new Simulation(
                "tc3RM_SOFT", 
                Simulation.SimulationTypes.SOFT, 
                inputTestDir + "testCase3.txt", 
                traceActualDir + "tc3RM_SOFT.trc", 
                InstanceOfPeriodicTask.Comparators.TASK_PERIOD);
        
        //EDF soft simulations
        tc1EDF_SOFT = new Simulation(
                "tc1EDF_SOFT", 
                Simulation.SimulationTypes.SOFT, 
                inputTestDir + "testCase1.txt", 
                traceActualDir + "tc1EDF_SOFT.trc", 
                InstanceOfPeriodicTask.Comparators.ABSOLUTE_DEADLINE);
        
        tc2EDF_SOFT = new Simulation(
                "tc2EDF_SOFT", 
                Simulation.SimulationTypes.SOFT, 
                inputTestDir + "testCase2.txt", 
                traceActualDir + "tc2EDF_SOFT.trc", 
                InstanceOfPeriodicTask.Comparators.ABSOLUTE_DEADLINE);
        
        tc3EDF_SOFT = new Simulation(
                "tc3EDF_SOFT", 
                Simulation.SimulationTypes.SOFT, 
                inputTestDir + "testCase3.txt", 
                traceActualDir + "tc3EDF_SOFT.trc", 
                InstanceOfPeriodicTask.Comparators.ABSOLUTE_DEADLINE);
    }

    /**
     * Test of run method, of class Simulation with RM Soft simulations.
     * Tests if trace files are equal to expected.
     */
    @Test
    public void testRM_SOFT() {
        System.out.print("RM Soft: ");
        
        //start RM soft simulations
        tc1RM_SOFT.start();
        tc2RM_SOFT.start();
        tc3RM_SOFT.start();
        
        /* join, so that everything bellow has to wait until all the simulations
        are finished (other simulations need to wait, because of file locking,
        since they use the same input files) */
        try {
            tc1RM_SOFT.join();
            tc2RM_SOFT.join();
            tc3RM_SOFT.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(SimulationTest.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        //check that all trace files generated by the simulations are equal to
        //the expected trace files
        assertTrue(filesEqual(
                traceExpectedDir + "tc1RM_SOFT.trc", 
                traceActualDir + "tc1RM_SOFT.trc"));
        
        assertTrue(filesEqual(
                traceExpectedDir + "tc2RM_SOFT.trc", 
                traceActualDir + "tc2RM_SOFT.trc"));
        
        assertTrue(filesEqual(
                traceExpectedDir + "tc3RM_SOFT.trc", 
                traceActualDir + "tc3RM_SOFT.trc"));
        
        System.out.println("OK");
    }
    
    /**
     * Test of run method, of class Simulation with EDF Soft simulations.
     * Tests if trace files are equal to expected.
     */
    @Test
    public void testEDF_SOFT() {
        System.out.print("EDF Soft: ");
        
        //start EDF soft simulations
        tc1EDF_SOFT.start();
        tc2EDF_SOFT.start();
        tc3EDF_SOFT.start();
        
        /* join, so that everything bellow has to wait until all the simulations
        are finished (other simulations need to wait, because of file locking,
        since they use the same input files) */
        try {
            tc1EDF_SOFT.join();
            tc2EDF_SOFT.join();
            tc3EDF_SOFT.join();
        } catch (InterruptedException ex) {
            Logger.getLogger(SimulationTest.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        assertTrue(filesEqual(
                traceExpectedDir + "tc1EDF_SOFT.trc", 
                traceActualDir + "tc1EDF_SOFT.trc"));
        
        assertTrue(filesEqual(
                traceExpectedDir + "tc2EDF_SOFT.trc", 
                traceActualDir + "tc2EDF_SOFT.trc"));
        
        assertTrue(filesEqual(
                traceExpectedDir + "tc3EDF_SOFT.trc", 
                traceActualDir + "tc3EDF_SOFT.trc"));
        
        System.out.println("OK");
    }
    
    /**
     * Tests if two files are the same, by comparing each line.
     * @param expected Expected file
     * @param actual Actual file
     * @return true if files are the same, false if they differ
     */
    private boolean filesEqual(String expected, String actual) {
        File fExpected = new File(expected);
        File fActual   = new File(actual);
        
        try {
            Scanner scanExpected = new Scanner(fExpected);
            Scanner scanActual   = new Scanner(fActual);
            
            //scan every line of two files
            while (scanExpected.hasNext()) {
                //if the expected file is longer than the actual file, false
                if (!scanActual.hasNext()) { return false; }
                
                //if one of the lines doesn't match, return false
                if (!scanExpected.nextLine().equals(scanActual.nextLine())) {
                    return false;
                }
            }
            
            //if, after going through all the lines from the expected file,
            //the actual file has more lines, that means that the actual file
            //is longer - return false
            if (scanActual.hasNext()) { return false; }
            
        } catch (FileNotFoundException ex) {
            Logger.getLogger(SimulationTest.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        return true;
    }
    
}
